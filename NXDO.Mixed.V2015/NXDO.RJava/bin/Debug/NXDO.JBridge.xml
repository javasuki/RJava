<?xml version="1.0"?>
<doc>
    <assembly>
        "NXDO.JBridge.X64"
    </assembly>
    <members>
        <member name="M:NXDO.JBridge.JRunEnvironment.Load(System.String,System.Boolean)">
            <summary>
装载java程序集
</summary>
            <param name="jarNames">多个以;分割的jar文件名，可使用与应用程序启动目录的相对路径。</param>
            <param name="isCheckJarIsNull">true,为空时抛出异常。</param>
        </member>
        <member name="M:NXDO.JBridge.JRunEnvironment.CreateByConfig(System.String)">
            <summary>
通过配置文件建立java运行时桥接环境
</summary>
            <param name="configFileName">配置文件名称</param>
        </member>
        <member name="M:NXDO.JBridge.JRunEnvironment.Create(System.String,System.Int32)">
            <summary>
建立java运行时桥接环境
</summary>
            <param name="JvmFileName">指定jvm.dll的全路径。</param>
            <param name="jdkVersion">JDK版本。5：jdk5，6：jdk6，必须确保您的主机安装有该版本的JDK。<para>具体可查看jni.h的设置。</para></param>
        </member>
        <member name="M:NXDO.JBridge.JRunEnvironment.Create(System.String)">
            <summary>
建立java运行时桥接环境
<para>使用JDK6启动JVM</para></summary>
            <param name="JvmFileName">指定jvm.dll的全路径。</param>
        </member>
        <member name="M:NXDO.JBridge.JRunEnvironment.Create(System.Int32)">
            <summary>
建立java运行时桥接环境
<para>从环境变量[JAVA_HOME]中启动JVM（JDK6）</para></summary>
            <param name="jdkVersion">JDK版本。5：jdk5，6：jdk6，必须确保您的主机安装有该版本的JDK。<para>具体可查看jni.h的设置。</para></param>
        </member>
        <member name="M:NXDO.JBridge.JRunEnvironment.Create">
            <summary>
建立java运行时桥接环境
<para>从环境变量[JAVA_HOME]中启动JVM（默认使用 JDK6）。</para></summary>
        </member>
        <member name="M:NXDO.JBridge.JRunEnvironment.#ctor(System.String,System.Int32)">
            <summary>
建立java运行时桥接环境
</summary>
            <param name="JvmFileName">指定jvm.dll的全路径。</param>
            <param name="jdkVersion">JDK版本。5：jdk5，6：jdk6 以此类推，但必须确保您的主机安装有该版本的JDK。</param>
        </member>
        <member name="M:NXDO.JBridge.JRunEnvironment.#ctor(System.String)">
            <summary>
建立java运行时桥接环境
<para>使用JDK6启动JVM</para></summary>
            <param name="JvmFileName">指定jvm.dll的全路径。</param>
        </member>
        <member name="M:NXDO.JBridge.JRunEnvironment.#ctor(System.Int32)">
            <summary>
建立java运行时桥接环境
<para>从环境变量[JAVA_HOME]中启动JVM（JDK6）</para></summary>
            <param name="jdkVersion">JDK版本。5：jdk5，6：jdk6，7：jdk7 以此类推，但必须确保您的主机安装有该版本的JDK。</param>
        </member>
        <member name="M:NXDO.JBridge.JRunEnvironment.#ctor">
            <summary>
建立java运行时桥接环境
<para>从环境变量[JAVA_HOME]中启动JVM（默认使用 JDK6）。</para></summary>
        </member>
        <member name="T:NXDO.JBridge.JRunEnvironment">
            <summary>
java运行时桥接环境
</summary>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.GetObjectHashcode(System.IntPtr)">
            <summary>
java.object.hashCode()
</summary>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.GetObjectToString(System.IntPtr)">
            <summary>
java.object.toString()
</summary>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.CastToNValueNullable(System.IntPtr,NXDO.JBridge.ValueTypeFlag)">
            <summary>
如果存在值,转换成托管对象可空类型的值
</summary>
            <param name="valueTypePtr">java 值类型对应实例指针 (java.lang.Integer)</param>
            <param name="ValueTypeFlag">类型标识枚举值。</param>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.CastToNObject(System.IntPtr,System.Type)">
            <summary>
转换成托管对象
</summary>
            <param name="objectPtr">java 实例指针 (java.lang.Object)</param>
            <param name="NObjType">java 实例对应的托管类型。</param>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.FreeJObject(System.Object)">
            <summary>
JVM 释放 java 实例
</summary>
            <param name="objectPtr">需要释放的 java 实例指针 (java.lang.Object)</param>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.GetValueArrayInvokeMethod(System.IntPtr,System.String,NXDO.JBridge.ValueTypeFlag,System.Boolean[])">
            <summary>
执行java方法并获取数组结果.
<para>int等值类型数组,与String数组</para></summary>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.GetValueInvokeMethod(System.IntPtr,System.String,NXDO.JBridge.ValueTypeFlag,System.Boolean[])">
            <summary>
执行java方法并获取返回结果.
<para>返回结果为值类型,string</para></summary>
            <param name="objectPtr">java 实例指针或类型指针 (java.lang.Object/java.lang.Class)</param>
            <param name="methodName">java 方法名称</param>
            <param name="valueType">java端返回结果的类型标识</param>
            <param name="isStatics">true:静态方法，反之为实例方法。<para>缺省为实例方法。</para></param>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.GetValueNullableArrayInvokeMethod(System.IntPtr,System.String,NXDO.JBridge.ValueTypeFlag,System.Boolean[])">
            <summary>
执行java方法并获取数组结果.
<para>java.lang.Integer等引用类型数组</para></summary>
            <param name="objectPtr">实例（实例方法）或类型（静态方法）的指针</param>
            <param name="methodName">方法名称</param>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.GetObjectArrayInvokeMethod(System.IntPtr,System.String,System.Type,System.Boolean[])">
            <summary>
执行java方法并获取数组结果.
<para>JObject子类[]</para></summary>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.GetObjectInvokeMethod(System.IntPtr,System.String,System.Boolean[])">
            <summary>
执行java方法并获取返回结果的指针.
</summary>
            <param name="objectPtr">java 实例指针或类型指针 (java.lang.Object/java.lang.Class)</param>
            <param name="methodName">java 方法名称</param>
            <param name="isStatics">true:静态方法，反之为实例方法。<para>缺省为实例方法。</para></param>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.FillJavaParamValues(System.Object,System.Boolean,System.Boolean,System.Boolean,NXDO.JBridge.ValueTypeFlag,System.String,System.String)">
            <summary>
方法调用前，设置方法的参数列表值。
</summary>
            <param name="obj">普通参数值或数组</param>
            <param name="isSubOfJObject">参数值为数组，则有效。数组元素是否为 JObject 的子类）</param>
            <param name="isLangObject">普通参数或数组元素，是否为引用类型。</param>
            <param name="typeFlag">普通参数或数组元素的类型标示</param>
            <param name="refJavaClassName">普通参数或数组元素的 java 类型字符串形式。</param>
            <param name="refJavaArrayElemClassName">普通参数时为空。数组元素java类型的字符串形式。java/lang/xxx</param>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.ClearParams">
            <summary>
清除上次调用前的设置的参数列表
</summary>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.HasJavaExceptionByThrow">
            <summary>
存在java运行时异常,则抛出异常.
</summary>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.addParamArrayToJava(System.Object,System.Boolean,System.Boolean,NXDO.JBridge.ValueTypeFlag,System.String,System.String)">
            <summary>
添加参数值
</summary>
            <param name="obj">参数值（值类型数组，值的引用类型数组，String[], 子类JObject[]，）</param>
            <param name="isSubOfJObject">数组元素是否为 JObject 的子类）</param>
            <param name="isLangObject">数组元素是否为引用类型</param>
            <param name="typeFlag">类型标示</param>
            <param name="refJavaClassName">java类型的字符串形式。[Lxxx;</param>
            <param name="refJavaArrayElemClassName">数组元素java类型的字符串形式。java/lang/xxx</param>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.addParamValue(System.Object,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
添加参数值
</summary>
            <param name="obj">参数值</param>
            <param name="isLangObject">参数是否为引用类型</param>
            <param name="refJavaClassName">参数为引用类型时,参数的java类名称,反之为空</param>
            <param name="refJavaArrayElemClassName">参数为数组类型时,数组元素参数的java类名称,反之为空</param>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.getFromFieldMap(NXDO.JBridge.ValueTypeFlag)">
            <summary>
从缓存中获取 jarLoader 中不同参数 invoke[Boolean/Long/.../Object]Field 的方法
</summary>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.getFromInvokeMap(NXDO.JBridge.ValueTypeFlag)">
            <summary>
从缓存中获取 jarLoader 中不同参数 invoke[Boolean/Long/.../Object]Method 的方法
</summary>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.getFromLMap(NXDO.JBridge.ValueTypeFlag)">
            <summary>
从缓存中获取 引用类型(java.lang.Integer/...) 的方法
</summary>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.getFromVMap(NXDO.JBridge.ValueTypeFlag)">
            <summary>
从缓存中获取 值类型(简单类型) 的方法
</summary>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.addToFieldMap(NXDO.JBridge.ValueTypeFlag,_jmethodID*)">
            <summary>
添加 java层 jarLoader 中不同参数 invoke[Boolean/Long/.../Object]Field 的方法
</summary>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.addToInvokeMap(NXDO.JBridge.ValueTypeFlag,_jmethodID*)">
            <summary>
添加 java层 jarLoader 中不同参数 invoke[Boolean/Long/.../Object]Method 的方法
</summary>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.addToLMap(NXDO.JBridge.ValueTypeFlag,_jmethodID*)">
            <summary>
添加 引用类型(java.lang.Integer/...) 的方法
</summary>
        </member>
        <member name="M:NXDO.JBridge.JJarLoader.addToVMap(NXDO.JBridge.ValueTypeFlag,_jmethodID*)">
            <summary>
添加 值类型(简单类型) 的方法
</summary>
        </member>
        <member name="M:NXDO.JBridge.JarReflection.DisposeSelf">
            <summary>
释放自身占有的资源
</summary>
        </member>
        <member name="M:NXDO.JBridge.JarReflection.FreeJObject(System.IntPtr,System.IntPtr)">
            <summary>
释放 JObject 占有的 java 资源
</summary>
        </member>
        <member name="M:NXDO.JBridge.JarReflection.GetObjectHashcode(System.IntPtr)">
            <summary>
java.object.hashCode()
</summary>
        </member>
        <member name="M:NXDO.JBridge.JarReflection.GetObjectToString(System.IntPtr)">
            <summary>
java.object.toString()
</summary>
        </member>
        <member name="M:NXDO.JBridge.JarReflection.HasJavaExceptionByThrow">
            <summary>
存在java运行时异常,则抛出异常.
</summary>
        </member>
        <member name="M:larray.toNSubofJObjectArray(_jobject*,System.Type)">
            <summary>
java.lang.Object[] 转成 c# NXDO.JRuntime.JVM.JObject[]
</summary>
        </member>
        <member name="M:larray.toNStringArray(_jobject*)">
            <summary>
java.lang.String[] 转成 c# string[]	
</summary>
        </member>
        <member name="M:larray.toNDoubleArray(_jobject*,System.Boolean)">
            <summary>
java double[]/Double[] 转成 c# double[]/double?[]	
</summary>
            <param name="elemIsObject">true为java.lang.Double (转成double?), false为java基础类型 (转成double)</param>
        </member>
        <member name="M:larray.toNFloatArray(_jobject*,System.Boolean)">
            <summary>
java float[]/Float[] 转成 c# float[]/float?[]	
</summary>
            <param name="elemIsObject">true为java.lang.Float (转成float?), false为java基础类型 (转成float)</param>
        </member>
        <member name="M:larray.toNLongArray(_jobject*,System.Boolean)">
            <summary>
java long[]/Long[] 转成 c# long[]/long?[]	
</summary>
            <param name="elemIsObject">true为java.lang.Long (转成long?), false为java基础类型 (转成long)</param>
        </member>
        <member name="M:larray.toNIntArray(_jobject*,System.Boolean)">
            <summary>
java int[]/Integer[] 转成 c# int[]/int?[]	
</summary>
            <param name="elemIsObject">true为java.lang.Integer (转成int?), false为java基础类型 (转成int)</param>
        </member>
        <member name="M:larray.toNShortArray(_jobject*,System.Boolean)">
            <summary>
java short[]/Short[] 转成 c# short[]/short?[]	
</summary>
            <param name="elemIsObject">true为java.lang.Short (转成short?), false为java基础类型 (转成short)</param>
        </member>
        <member name="M:larray.toNCharArray(_jobject*,System.Boolean)">
            <summary>
java char[]/Character[] 转成 c# char[]/char?[]	
</summary>
            <param name="elemIsObject">true为java.lang.Character (转成char?), false为java基础类型 (转成char)</param>
        </member>
        <member name="M:larray.toNByteArray(_jobject*,System.Boolean)">
            <summary>
java byte[]/Byte[] 转成 c# byte[]/byte?[]	
</summary>
            <param name="elemIsObject">true为java.lang.Byte (转成byte?), false为java基础类型 (转成byte)</param>
        </member>
        <member name="M:larray.toNBoolArray(_jobject*,System.Boolean)">
            <summary>
java bool[]/Boolean[] 转成 c# bool[]/bool?[]	
</summary>
            <param name="elemIsObject">true为java.lang.Boolean (转成bool?), false为java基础类型 (转成bool)</param>
        </member>
        <member name="M:larray.toJavaMethodArray(NXDO.JBridge.JParamValue[])">
            <summary>
c#的方法传入参数数组 转成 java方法调用所对应的参数数组
<para>索引0= java类型数组 java.lang.Class&lt;?&gt;[]</para><para>索引1= java参数值数组 java.lang.Object[]</para></summary>
        </member>
        <member name="M:larray.toJStringArray(System.Array)">
            <summary>
c# string[] 转成 java.lang.String[]
<para>反射判断数组元素类型,double为java基础类型, double?为java.lang.String</para></summary>
        </member>
        <member name="M:larray.toJDoubleArray(System.Array)">
            <summary>
c# double[]/double?[] 转成 java double[]/Double[]
<para>反射判断数组元素类型,double为java基础类型, double?为java.lang.Double</para></summary>
        </member>
        <member name="M:larray.toJFloatArray(System.Array)">
            <summary>
c# float[]/float?[] 转成 java float[]/Float[]
<para>反射判断数组元素类型,float为java基础类型, float?为java.lang.Float</para></summary>
        </member>
        <member name="M:larray.toJLongArray(System.Array)">
            <summary>
c# long[]/long?[] 转成 java long[]/Long[]
<para>反射判断数组元素类型,long为java基础类型, long?为java.lang.Long</para></summary>
        </member>
        <member name="M:larray.toJIntArray(System.Array)">
            <summary>
c# int[]/int?[] 转成 java int[]/Integer[]
<para>反射判断数组元素类型,int为java基础类型, int?为java.lang.Integer</para></summary>
        </member>
        <member name="M:larray.toJShortArray(System.Array)">
            <summary>
c# short[]/short?[] 转成 java short[]/Short[]
<para>反射判断数组元素类型,short为java基础类型, short?为java.lang.Short</para></summary>
        </member>
        <member name="M:larray.toJCharArray(System.Array)">
            <summary>
c# char[]/char?[] 转成 java char[]/Character[]
<para>反射判断数组元素类型,char为java基础类型, char?为java.lang.Character</para></summary>
        </member>
        <member name="M:larray.toJByteArray(System.Array)">
            <summary>
c# byte[]/byte?[] 转成 java byte[]/Byte[]
<para>反射判断数组元素类型,byte为java基础类型, bool?为java.lang.Byte</para></summary>
        </member>
        <member name="M:larray.toJBoolArray(System.Array)">
            <summary>
c# bool[]/bool?[] 转成 java bool[]/Boolean[]
<para>反射判断数组元素类型,bool为java基础类型, bool?为java.lang.Boolean</para></summary>
        </member>
        <member name="M:larray.addRefObjectToList(_jobject*,System.Collections.IList,System.Type)">
            <summary>
转换java数组元素值(元素值均为引用类型)到C#的值,并添加到指定的集合中.
<para>泛型集合中类型必须与转换后的C#类型相同.</para></summary>
            <param name="gList">泛型集合对应非泛型的集合</param>
            <param name="">C#的类型(非空类型,不是类似int?,而是int),仅根据类型转换C#的值</param>
        </member>
        <member name="M:larray.createObjectArray(System.Int32,System.String)">
            <summary>
根据类型(java.lang.Class),建立 Class类型[] 的数组
</summary>
            <param name="jniClassName">jni层的类型名称, 使用/分隔, 例: java/lang/Integer</param>
        </member>
        <member name="P:NXDO.JBridge.JParamValue.Class">
            <summary>
java方法调用时需要匹配的参数类型
</summary>
        </member>
        <member name="P:NXDO.JBridge.JParamValue.Value">
            <summary>	
java方法调用时需要的参数值
</summary>
        </member>
        <member name="P:NXDO.JBridge.JParamValue.JClass">
            <summary>
java参数类型的指针值
</summary>
        </member>
        <member name="P:NXDO.JBridge.JParamValue.JValue">
            <summary>
java参数的指针值
</summary>
        </member>
        <member name="M:NXDO.JBridge.JParamValue.#ctor(System.String)">
            <summary>
初始化 Java 参数值包装器。
</summary>
            <param name="paramJavaClassName">java方法的参数类型名称。</param>
        </member>
        <member name="T:NXDO.JBridge.JParamValue">
            <summary>
Java 参数包装器。
</summary>
        </member>
        <member name="M:lconvert.freeHolder">
            <summary>
释放持有对象
</summary>
        </member>
        <member name="T:NXDO.JBridge.ValueTypeFlag">
            <summary>
类型标识
</summary>
        </member>
        <member name="F:NXDO.JBridge.ValueTypeFlag.VF_object">
            <summary>
对象类型
</summary>
        </member>
        <member name="F:NXDO.JBridge.ValueTypeFlag.VF_string">
            <summary>
字符串
</summary>
        </member>
        <member name="F:NXDO.JBridge.ValueTypeFlag.VF_double">
            <summary>
Double
</summary>
        </member>
        <member name="F:NXDO.JBridge.ValueTypeFlag.VF_float">
            <summary>
float,Single
</summary>
        </member>
        <member name="F:NXDO.JBridge.ValueTypeFlag.VF_long">
            <summary>
Int64
</summary>
        </member>
        <member name="F:NXDO.JBridge.ValueTypeFlag.VF_int">
            <summary>
Int32
</summary>
        </member>
        <member name="F:NXDO.JBridge.ValueTypeFlag.VF_short">
            <summary>
Int16
</summary>
        </member>
        <member name="F:NXDO.JBridge.ValueTypeFlag.VF_char">
            <summary>
字符
</summary>
        </member>
        <member name="F:NXDO.JBridge.ValueTypeFlag.VF_byte">
            <summary>
字节
</summary>
        </member>
        <member name="F:NXDO.JBridge.ValueTypeFlag.VF_bool">
            <summary>
布尔型
</summary>
        </member>
        <!-- 丢弃成员“M:larray.toJavaObjectArray(System.Array,_jclass*)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:larray.toJavaObjectArray(System.Array,_jclass*)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:larray.toJavaObjectArray(System.Array,_jclass*)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:larray.toJavaObjectArray(System.Array,_jclass*)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:NXDO.JBridge.JJarLoader.getJString(System.String)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:larray.toJavaObjectArray(System.Array,_jclass*)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:larray.toJavaObjectArray(System.Array,_jclass*)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:NXDO.JBridge.JJarLoader.getJString(System.String)”的格式错误的 XML 文档注释。 -->
        <!-- 丢弃成员“M:larray.toJavaObjectArray(System.Array,_jclass*)”的格式错误的 XML 文档注释。 -->
    </members>
</doc>