<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NXDO.RJava.V2015</name>
    </assembly>
    <members>
        <member name="T:NXDO.RJava.Attributes.JAssemblyAttribute">
            <summary>
            标识 java class 打包后的程序集 (jar或zip) 文件名称。
            </summary>
        </member>
        <member name="M:NXDO.RJava.Attributes.JAssemblyAttribute.#ctor(System.String)">
            <summary>
            标识java程序集
            </summary>
            <param name="jarNames">java程序集名称。<para>支持使用相对路径，可用;分隔多个程序集名称。</para></param>
        </member>
        <member name="M:NXDO.RJava.Attributes.JAssemblyAttribute.#ctor(System.String,System.Int32)">
            <summary>
            标识java程序集
            </summary>
            <param name="jarNames">java程序集名称。<para>支持使用相对路径，可用;分隔多个程序集名称。</para></param>
            <param name="loadIndex">加载次序</param>
        </member>
        <member name="T:NXDO.RJava.Attributes.JClassAttribute">
            <summary>
            标识 java 的类型名称。
            </summary>
        </member>
        <member name="M:NXDO.RJava.Attributes.JClassAttribute.#ctor(System.String)">
            <summary>
            设置 java 类型名称
            </summary>
            <param name="jclassName">java 类型名称</param>
        </member>
        <member name="M:NXDO.RJava.Attributes.JClassAttribute.Get(NXDO.RJava.JObject)">
            <summary>
            获取类上的 JClassAttribute 注解的 java 类型名称
            </summary>
            <param name="type">JObject继承类实例</param>
            <returns>java 类型名称</returns>
        </member>
        <member name="M:NXDO.RJava.Attributes.JClassAttribute.Get(System.Type)">
            <summary>
            获取类上的 JClassAttribute 注解的 java 类型名称
            </summary>
            <param name="type">类</param>
            <returns>java 类型名称</returns>
        </member>
        <member name="P:NXDO.RJava.Attributes.JClassAttribute.ClassName">
            <summary>
            java 类型名称
            </summary>
        </member>
        <member name="T:NXDO.RJava.Attributes.JEnumAttribute">
            <summary>
            标识 java 枚举的类型名称。
            </summary>
        </member>
        <member name="M:NXDO.RJava.Attributes.JEnumAttribute.#ctor(System.String)">
            <summary>
            设置 java 枚举的类型名称
            </summary>
            <param name="jEnumClassName">java 枚举的类型名称</param>
        </member>
        <member name="T:NXDO.RJava.Attributes.JInterfaceAttribute">
            <summary>
            标识 java 接口的类型名称。
            </summary>
        </member>
        <member name="M:NXDO.RJava.Attributes.JInterfaceAttribute.#ctor(System.String)">
            <summary>
            设置 java 接口的类型名称
            </summary>
            <param name="jInterfaceName">java 接口的类型名称</param>
        </member>
        <member name="T:NXDO.RJava.Attributes.JEmitAttribute">
            <summary>
            标识 java 类型名称，仅用于接口的实现。
            <para>标识的 java 类型必须具有 0 个参数的公共默认构造函数。</para>
            </summary>
        </member>
        <member name="M:NXDO.RJava.Attributes.JEmitAttribute.#ctor(System.String)">
            <summary>
            标识 java 类型名称，用于接口实现
            </summary>
            <param name="javaClassName"></param>
        </member>
        <member name="T:NXDO.RJava.Attributes.JMethodAttribute">
            <summary>
            标识 java 方法真实名称
            <para>java 方法真实名称的首字母为小写时，可省略。</para>
            </summary>
        </member>
        <member name="M:NXDO.RJava.Attributes.JMethodAttribute.#ctor">
            <summary>
            标识 java 为首字母小写的方法。
            <para>java 方法真实名称的首字母为小写时，可省略。</para>
            </summary>
        </member>
        <member name="M:NXDO.RJava.Attributes.JMethodAttribute.#ctor(System.String)">
            <summary>
            标识 java 方法。
            </summary>
            <param name="jMethodName">java 方法真实名称。</param>
        </member>
        <member name="P:NXDO.RJava.Attributes.JMethodAttribute.Name">
            <summary>
            获取java方法名称。
            </summary>
        </member>
        <member name="T:NXDO.RJava.Attributes.JParameterAttribute">
            <summary>
            标识参数的真实 java 类型。
            </summary>
        </member>
        <member name="M:NXDO.RJava.Attributes.JParameterAttribute.#ctor(System.String)">
            <summary>
            设置 java 方法参数调用时对应实际的 java 类型名称
            </summary>
            <param name="jInterfaceName">java 参数实际的类型名称</param>
        </member>
        <member name="T:NXDO.RJava.Core.IRJavaDefine`1">
            <summary>
            支持 JObject 转换成程序集内已定义的实现某接口的类（包含内部类）实例。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NXDO.RJava.Core.IRJavaDefine`1.GetConvertToDefine(NXDO.RJava.JObject)">
            <summary>
            获取转换后的一个已知类型或接口。
            </summary>
            <param name="jobject">JObject 实例</param>
            <returns>某一个已知类型或接口。</returns>
        </member>
        <member name="T:NXDO.RJava.Core.JDictionary`2">
            <summary>
            表示为 java.util.Map&lt;K, V&gt; 接口声明，并继承了 System.Collections.Generic.IDictionary&lt;TKey, TValue&gt; 接口。
            <para>(JDK1.6) java.util.Dictionary&lt;K, V&gt; 已过期，推荐使用 java.util.Map&lt;K, V&gt;。</para>
            <para>.</para>
            <para>C#, JDictionary&lt;int, string&gt; jDictionary = new Dictionary&lt;int,string&gt;().ToJavaDictionary();</para>
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:NXDO.RJava.JIBase">
            <summary>
            提供一个低级别的接口，已由 JObject 实现。
            <para>不推荐在用户代码中实现该接口。使用 JActivator.CreateByInterface 方法的接口可继承，以提供低级别的服务。</para>
            </summary>
        </member>
        <member name="M:NXDO.RJava.JIBase.GetClass">
            <summary>
            获取当前实例的 JClass。
            </summary>
            <returns>JClass 实例，表示当前实例的在 jvm 中运行时的确切类型。</returns>
        </member>
        <member name="M:NXDO.RJava.JIBase.AsCast">
            <summary>
            转换当前接口为 JObject 实例类型。
            <para>该实例在 jvm 中运行时的确切类型，由继承接口上的 JEmitAttribute 特性提供。</para>
            </summary>
            <returns>JObject 实例。</returns>
        </member>
        <member name="M:NXDO.RJava.Core.JDictionary`2.ContainsValue(`1)">
            <summary>
            确定 JDictionary&lt;TKey,TValue&gt; 是否包含具有指定元素。
            <para>java.util.Map&lt;K,V&gt;.containsValue(Object value)</para>
            </summary>
            <param name="value">指定元素</param>
            <returns>如果包含带有该值的元素，则为 true；否则，为false。</returns>
        </member>
        <member name="T:NXDO.RJava.JObject">
            <summary>
            支持 java 类层次结构中的所有类，并为派生类提供低级别服务。这是 C#.RJava 中所有类的最终基类；它是 java 类型层次结构的根。
            <para>未实现数组的根类型。
            <code>JObject jobj = int[]{1,2,3} 无效。</code>
            </para>
            <para>未实现泛型类上泛型参数的嵌套 eg. MyClass&lt;T&gt; : JObject，T又是一个泛型类型。</para>
            </summary>
        </member>
        <member name="M:NXDO.RJava.JObject.#ctor">
            <summary>
            JObject 构造函数，与java无任何交互。
            </summary>
        </member>
        <member name="M:NXDO.RJava.JObject.#ctor(System.IntPtr,System.IntPtr)">
            <summary>
            继承类必须实现的构造函数，与java 交互并持有 jvm 中的对象实例。
            <para>此构造函数由内部框架调用实现，请勿在用户代码中做任何调用。</para>
            </summary>
            <param name="objectPtr">实例指针</param>
            <param name="classPtr">类型指针</param>
        </member>
        <member name="M:NXDO.RJava.JObject.GetClass">
            <summary>
            获取当前实例的 JClass。
            </summary>
            <returns>JClass 实例，表示当前实例的在 jvm 中运行时的确切类型。</returns>
        </member>
        <member name="M:NXDO.RJava.JObject.JSuper(System.Object[])">
            <summary>
            执行 java 构造方法。
            </summary>
            <param name="values">构造方法参数列表。</param>
        </member>
        <member name="M:NXDO.RJava.JObject.JInvokeMethod(System.Type,System.String,NXDO.RJava.JObject,System.Object[])">
            <summary>
            调用无返回值的 java 方法
            </summary>
            <param name="cahceType">缓存JObject继承类的类型。</param>
            <param name="cacheMethodKey">缓存java方法的KEY,不是有效的java方法名称。</param>
            <param name="jObjectInstance">JObject继承类实例，静态方法使用null。</param>
            <param name="values">方法调用的参数。<code>如果含有数组则： new object[]{ value, array }</code></param>
        </member>
        <member name="M:NXDO.RJava.JObject.JInvokeMethod``1(System.Type,System.String,NXDO.RJava.JObject,System.Object[])">
            <summary>
            调用 java 方法
            </summary>
            <typeparam name="T">返回值的类型参数</typeparam>
            <param name="cahceType">缓存JObject继承类的类型。</param>
            <param name="cacheMethodKey">缓存java方法的KEY,不是有效的java方法名称。</param>
            <param name="jObjectInstance">JObject继承类实例，静态方法使用null。</param>
            <param name="values">方法调用的参数。<code>如果含有数组则： new object[]{ value, array }</code></param>
            <returns>T类型的返回值。</returns>
        </member>
        <member name="M:NXDO.RJava.JObject.JInvokeField``1(System.Type,System.String,NXDO.RJava.JObject,System.Object)">
            <summary>
            获取或设置 java 成员变量的值。
            <para>获取时，必须为某属性的get方法中调用。反之设置为set方法中调用。</para>
            </summary>
            <typeparam name="T">成员变量对应dotnet的类型</typeparam>
            <param name="cahceType">JObject继承类的类型</param>
            <param name="jFieldName">java 成员变量的名称，必须与 java 类中保持一致。</param>
            <param name="jObjectInstance">JObject继承类的实例。<para>如果是静态成员，则设置成 null。</para></param>
            <param name="fieldValue">设置成员变量的值。<para>如果是获取成员变量值，则设置成 null，或使用默认值。</para></param>
            <returns>返回成员变量的值。</returns>
        </member>
        <member name="M:NXDO.RJava.JObject.Dispose">
            <summary>
            释放或重置非托管资源。
            </summary>
        </member>
        <member name="M:NXDO.RJava.JObject.ToString">
            <summary>
            返回表示当前 java.lang.Object 的 System.String。
            <para>java.lang.Class.getClass().getName() + '@' + Integer.toHexString(hashCode())</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:NXDO.RJava.JObject.GetHashCode">
            <summary>
            返回表示当前 java.lang.Object 的哈希代码。
            </summary>
            <returns>哈希代码</returns>
        </member>
        <member name="M:NXDO.RJava.JObject.Equals(System.Object)">
            <summary>
            确定指定的 java.lang.Object 是否等于当前的 java.lang.Object。
            </summary>
            <param name="obj">需要进行比较的 java.lang.Object。</param>
            <returns>相等为 true；否则为 false。</returns>
        </member>
        <member name="M:NXDO.RJava.JObject.ToStringN">
            <summary>
            返回表示当前 System.Object 的 System.String。
            <para>dotnet原生方法</para>
            </summary>
            <returns>表示当前的 System.Object。</returns>
        </member>
        <member name="M:NXDO.RJava.JObject.GetHashCodeN">
            <summary>
            用作特定类型的哈希函数。
            <para>dotnet原生方法</para>
            </summary>
            <returns>当前 System.Object 的哈希代码。</returns>
        </member>
        <member name="M:NXDO.RJava.JObject.EqualsN(System.Object)">
            <summary>
            确定指定的 System.Object 是否等于当前的 System.Object。
            </summary>
            <param name="obj">与当前的 System.Object 进行比较的 System.Object。</param>
            <returns>如果指定的 System.Object 等于当前的 System.Object，则为 true；否则为 false。</returns>
        </member>
        <member name="M:NXDO.RJava.JObject.op_Implicit(System.Boolean)~NXDO.RJava.JObject">
            <summary>
            bool装箱
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NXDO.RJava.JObject.op_Implicit(System.Byte)~NXDO.RJava.JObject">
            <summary>
            byte装箱
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NXDO.RJava.JObject.op_Implicit(System.Char)~NXDO.RJava.JObject">
            <summary>
            char装箱
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NXDO.RJava.JObject.op_Implicit(System.Int16)~NXDO.RJava.JObject">
            <summary>
            short装箱
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NXDO.RJava.JObject.op_Implicit(System.Int32)~NXDO.RJava.JObject">
            <summary>
            int装箱
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NXDO.RJava.JObject.op_Implicit(System.Int64)~NXDO.RJava.JObject">
            <summary>
            long装箱
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NXDO.RJava.JObject.op_Implicit(System.Single)~NXDO.RJava.JObject">
            <summary>
            float装箱
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NXDO.RJava.JObject.op_Implicit(System.Double)~NXDO.RJava.JObject">
            <summary>
            double装箱
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NXDO.RJava.JObject.op_Implicit(System.String)~NXDO.RJava.JObject">
            <summary>
            string装箱
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NXDO.RJava.JObject.op_Implicit(NXDO.RJava.JObject)~System.Boolean">
            <summary>
            bool拆箱
            </summary>
            <param name="value"></param>
            <returns>dotnet bool值</returns>
        </member>
        <member name="M:NXDO.RJava.JObject.op_Implicit(NXDO.RJava.JObject)~System.Byte">
            <summary>
            byte拆箱
            </summary>
            <param name="value"></param>
            <returns>dotnet byte值</returns>
        </member>
        <member name="M:NXDO.RJava.JObject.op_Implicit(NXDO.RJava.JObject)~System.Char">
            <summary>
            char拆箱
            </summary>
            <param name="value"></param>
            <returns>dotnet char值</returns>
        </member>
        <member name="M:NXDO.RJava.JObject.op_Implicit(NXDO.RJava.JObject)~System.Int16">
            <summary>
            short拆箱
            </summary>
            <param name="value"></param>
            <returns>dotnet short值</returns>
        </member>
        <member name="M:NXDO.RJava.JObject.op_Implicit(NXDO.RJava.JObject)~System.Int32">
            <summary>
            int拆箱
            </summary>
            <param name="value"></param>
            <returns>dotnet int值</returns>
        </member>
        <member name="M:NXDO.RJava.JObject.op_Implicit(NXDO.RJava.JObject)~System.Int64">
            <summary>
            long拆箱
            </summary>
            <param name="value"></param>
            <returns>dotnet long值</returns>
        </member>
        <member name="M:NXDO.RJava.JObject.op_Implicit(NXDO.RJava.JObject)~System.Single">
            <summary>
            float拆箱
            </summary>
            <param name="value"></param>
            <returns>dotnet float值</returns>
        </member>
        <member name="M:NXDO.RJava.JObject.op_Implicit(NXDO.RJava.JObject)~System.Double">
            <summary>
            double拆箱
            </summary>
            <param name="value"></param>
            <returns>dotnet double值</returns>
        </member>
        <member name="M:NXDO.RJava.JObject.op_Implicit(NXDO.RJava.JObject)~System.String">
            <summary>
            string拆箱
            </summary>
            <param name="value"></param>
            <returns>dotnet string值</returns>
        </member>
        <member name="P:NXDO.RJava.JObject.Class">
            <summary>
            Class&lt;java.lang.Object&gt; 实例。
            </summary>
        </member>
        <member name="P:NXDO.RJava.JObject.Handle">
            <summary>
            持有 java 对象实例的句柄。
            </summary>
        </member>
        <member name="P:NXDO.RJava.JObject.IsBoxStruct">
            <summary>
            是否为装箱对象
            </summary>
        </member>
        <member name="P:NXDO.RJava.Core.JavaDictionary`2.JClass">
            <summary>
            如果没有改变，则为 Map 接口的类型
            </summary>
        </member>
        <member name="P:NXDO.RJava.Core.JavaDictionary`2.JValue">
            <summary>
            HashMap 对象实例
            </summary>
        </member>
        <member name="T:NXDO.RJava.Core.JQueue`1">
            <summary>
            表示为 java.util.Queue&lt;?&gt; 接口声明, 对象的先进先出集合。
            <para>C#, JQueue&lt;int&gt; jQueue = new Queue&lt;int&gt;().ToJavaQueue();</para>
            </summary>
            <typeparam name="T">元素类型</typeparam>
        </member>
        <member name="M:NXDO.RJava.Core.JQueue`1.Clear">
            <summary>
            从集合中移除所有对象。
            </summary>
        </member>
        <member name="M:NXDO.RJava.Core.JQueue`1.Contains(`0)">
            <summary>
            确定某元素是否在集合中。
            </summary>
            <param name="item">元素</param>
            <returns>如果在集合找到 item，则为 true；否则为 false。</returns>
        </member>
        <member name="M:NXDO.RJava.Core.JQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            从指定数组索引开始将集合元素复制到现有一维 System.Array 中。
            </summary>
            <param name="array">作为从集合复制的元素的目标位置的一维 System.Array</param>
            <param name="arrayIndex">array 中从零开始的索引，将在此处开始复制。</param>
        </member>
        <member name="M:NXDO.RJava.Core.JQueue`1.Dequeue">
            <summary>
            移除并返回位于集合开始处的对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:NXDO.RJava.Core.JQueue`1.Enqueue(`0)">
            <summary>
            将对象添加到集合的结尾处。
            </summary>
            <param name="item">要添加到集合的对象。</param>
        </member>
        <member name="M:NXDO.RJava.Core.JQueue`1.Peek">
            <summary>
            返回位于集合开始处的对象但不将其移除。
            </summary>
            <returns>位于集合的开头的对象。</returns>
        </member>
        <member name="M:NXDO.RJava.Core.JQueue`1.ToArray">
            <summary>
            将集合元素复制到新数组。
            </summary>
            <returns>包含从集合复制的元素的新数组。</returns>
        </member>
        <member name="P:NXDO.RJava.Core.JQueue`1.Count">
            <summary>
            获取集合中包含的元素数。
            </summary>
        </member>
        <member name="P:NXDO.RJava.Core.JavaQueue`1.JClass">
            <summary>
            如果没有改变，则为 Queue 接口的类型
            </summary>
        </member>
        <member name="P:NXDO.RJava.Core.JavaQueue`1.JValue">
            <summary>
            LinkedList 对象实例
            </summary>
        </member>
        <member name="T:NXDO.RJava.Core.JStack`1">
            <summary>
            表示为 java.util.Stack&lt;?&gt; 类型声明, 大小可变的后进先出 (LIFO) 集合。
            <para>C#, JStack&lt;int&gt; jStack = new Stack&lt;int&gt;().ToJavaStack();</para>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NXDO.RJava.Core.JStack`1.Clear">
            <summary>
            从集合中移除所有对象。
            </summary>
        </member>
        <member name="M:NXDO.RJava.Core.JStack`1.Contains(`0)">
            <summary>
            确定某元素是否在集合中。
            </summary>
            <param name="item">元素</param>
            <returns>如果在集合找到 item，则为 true；否则为 false。</returns>
        </member>
        <member name="M:NXDO.RJava.Core.JStack`1.CopyTo(`0[],System.Int32)">
            <summary>
            从指定数组索引开始将集合元素复制到现有一维 System.Array 中。
            </summary>
            <param name="array">作为从集合复制的元素的目标位置的一维 System.Array</param>
            <param name="arrayIndex">array 中从零开始的索引，将在此处开始复制。</param>
        </member>
        <member name="M:NXDO.RJava.Core.JStack`1.Peek">
            <summary>
            返回位于集合顶部的对象但不将其移除。
            </summary>
            <returns>位于集合顶部的对象</returns>
        </member>
        <member name="M:NXDO.RJava.Core.JStack`1.Pop">
            <summary>
            移除并返回位于集合顶部的对象。
            </summary>
            <returns>位于集合顶部的对象</returns>
        </member>
        <member name="M:NXDO.RJava.Core.JStack`1.Push(`0)">
            <summary>
            将对象插入集合的顶部。
            </summary>
            <param name="item">要推入到集合中的对象。</param>
        </member>
        <member name="M:NXDO.RJava.Core.JStack`1.ToArray">
            <summary>
            将集合元素复制到新数组。
            </summary>
            <returns>包含从集合复制的元素的新数组。</returns>
        </member>
        <member name="P:NXDO.RJava.Core.JStack`1.Count">
            <summary>
            获取集合中包含的元素数。
            </summary>
        </member>
        <member name="P:NXDO.RJava.Core.JavaStack`1.JClass">
            <summary>
            Stack 的类型
            </summary>
        </member>
        <member name="P:NXDO.RJava.Core.JavaStack`1.JValue">
            <summary>
            Stack 对象实例
            </summary>
        </member>
        <member name="T:NXDO.RJava.Extension.JEnumerableExtension">
            <summary>
            扩展枚举器
            </summary>
        </member>
        <member name="M:NXDO.RJava.Extension.JEnumerableExtension.ToJavaList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将枚举器转换成可以迭代的 java.lang.List&lt;?&gt; 接口。
            </summary>
            <typeparam name="T">迭代类型，必须是简单类型 或 java 的类型。</typeparam>
            <param name="enumerable">dotnet 枚举器</param>
            <returns>java 的 List 接口</returns>
        </member>
        <member name="M:NXDO.RJava.Extension.JEnumerableExtension.ToJavaDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            将 键/值对的集合转换成 java.util.Map&lt;K, V&gt; 接口。
            </summary>
            <typeparam name="K">键的类型</typeparam>
            <typeparam name="V">值的类型</typeparam>
            <param name="dictionary">dotnet 键/值对的集合</param>
            <returns>java 的 Map 接口</returns>
        </member>
        <member name="M:NXDO.RJava.Extension.JEnumerableExtension.ToJavaQueue``1(System.Collections.Generic.Queue{``0})">
            <summary>
            将表示对象的先进先出集合转换成 java.util.Queue&lt;?&gt; 接口。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="queue">dotnet Queue&lt;T&gt;集合</param>
            <returns>java 的 Queue 接口</returns>
        </member>
        <member name="T:NXDO.RJava.JActivator">
            <summary>
            包含特定的方法，用以在本地创建对象类型。此类不能被继承。
            </summary>
        </member>
        <member name="M:NXDO.RJava.JActivator.CreateInstance(System.String)">
            <summary>
            使用无参数构造函数，创建 java 到 dotnet 对象引用实例。
            </summary>
            <param name="jClassName">首选 java 类型的名称。</param>
            <returns>对新创建 java 对象的引用。</returns>
        </member>
        <member name="M:NXDO.RJava.JActivator.CreateInstance(NXDO.RJava.JClass)">
            <summary>
            使用无参数构造函数，创建 java 到 dotnet 对象引用实例。
            </summary>
            <param name="jClass">要创建的 JClass 类型引用实例</param>
            <returns>对新创建 java 对象的引用。</returns>
        </member>
        <member name="M:NXDO.RJava.JActivator.CreateInstance``1">
            <summary>
            使用无参数构造函数，创建指定泛型类型参数所指定类型的 java 到 dotnet 对象引用实例。
            </summary>
            <typeparam name="T">要创建的 dotnet 类型</typeparam>
            <returns>对新创建 java 对象的引用。</returns>
        </member>
        <member name="M:NXDO.RJava.JActivator.CreateByInterface``1">
            <summary>
            建立一个实现指定接口的对象实例。
            </summary>
            <typeparam name="T">指定接口类型</typeparam>
            <returns>实现了该接口的对象实例</returns>
        </member>
        <member name="M:NXDO.RJava.JActivator.CreateDynamic(System.String)">
            <summary>
            建立动态包装对象。
            </summary>
            <param name="jClassName">首选 java 类型的名称。</param>
            <returns>java 动态包装对象</returns>
        </member>
        <member name="M:NXDO.RJava.JActivator.CreateDynamic(NXDO.RJava.JClass)">
            <summary>
            建立动态包装对象。
            </summary>
            <param name="jClass">要创建的 JClass 类型引用实例</param>
            <returns>java 动态包装对象</returns>
        </member>
        <member name="T:NXDO.RJava.JAssembly">
            <summary>
            表示一个或多个 java 程序集，它是一个可自我描述的 JVM 运行时应用程序构造块。
            </summary>
        </member>
        <member name="F:NXDO.RJava.JAssembly.jReflection">
            <summary>
            java 核心的装载与执行器
            </summary>
        </member>
        <member name="M:NXDO.RJava.JAssembly.GetJarsFullName(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            获取存在的多个带有PATH的 jar 文件名。
            </summary>
            <param name="lstNames">来源配置或设置，以；分隔的多个绝对或相对路径的 jar 文件名。</param>
            <returns></returns>
        </member>
        <member name="M:NXDO.RJava.JAssembly.SetJavaFileNames(System.String[],System.Collections.Generic.List{System.String})">
            <summary>
            设置需要加载多个文件名称
            </summary>
            <param name="names"></param>
            <param name="lstJarNames"></param>
        </member>
        <member name="M:NXDO.RJava.JAssembly.DeleteSameFileName(System.Collections.Generic.List{System.String})">
            <summary>
            只保留不同目录下一个同名文件。
            </summary>
            <param name="lstJarNames"></param>
        </member>
        <member name="M:NXDO.RJava.JAssembly.GetJAssemblyFiles">
            <summary>
            获取加载到 jvm 中的类库文件名
            </summary>
            <returns></returns>
        </member>
        <member name="M:NXDO.RJava.JAssembly.LoadFrom(System.String)">
            <summary>
            加载 java 程序集。
            </summary>
            <param name="jarNames">java程序集的文件名或路径，以；分隔的多个绝对或相对路径的 jar 文件名。</param>
        </member>
        <member name="M:NXDO.RJava.JAssembly.Dispose">
            <summary>
            释放整个 jvm 资源，仅在系统退出时调用。
            </summary>
        </member>
        <member name="P:NXDO.RJava.JAssembly.IsJarFileZeroCountThrow">
            <summary>
            是否检查需要加载的JAR文件数，true：0个文件时抛出异常，反之无异常。
            <para>默认为true.</para>
            <para>提供给生成器使用 JarFinder （dotnet中包装类）</para>
            </summary>
        </member>
        <member name="P:NXDO.RJava.JAssembly.JBridgeContext">
            <summary>
            建立 java 运行环境
            <para>JObject.JSuper中调用（仅一次初始C++中的JVM环境）</para>
            </summary>
        </member>
        <member name="T:NXDO.RJava.JBox">
            <summary>
            Dotnet类型装箱对象
            </summary>
        </member>
        <member name="M:NXDO.RJava.JBox.CreateBox(System.Object)">
            <summary>
            JObject通用与泛型的装箱
            </summary>
            <param name="o">需要装箱的值</param>
            <returns>JObject</returns>
        </member>
        <member name="M:NXDO.RJava.JBox.CreateBoxArray(System.Array)">
            <summary>
            JObject通用数组与泛型数组的装箱
            </summary>
            <param name="os">需要装箱的数组</param>
            <returns>JObject数组</returns>
        </member>
        <member name="P:NXDO.RJava.JBox.BoxType">
            <summary>
            装箱的类型
            </summary>
        </member>
        <member name="P:NXDO.RJava.JBox.BoxValue">
            <summary>
            装箱值
            </summary>
        </member>
        <member name="P:NXDO.RJava.JBox.IsBoxStruct">
            <summary>
            是否为装箱对象
            </summary>
        </member>
        <member name="T:NXDO.RJava.JBox`1">
            <summary>
            装箱对象
            </summary>
        </member>
        <member name="M:NXDO.RJava.JBox`1.ToString">
            <summary>
            重写ToString，便于查看装箱值。
            </summary>
            <returns></returns>
        </member>
        <member name="P:NXDO.RJava.JBox`1.BoxType">
            <summary>
            装箱的类型
            </summary>
        </member>
        <member name="P:NXDO.RJava.JBox`1.BoxValue">
            <summary>
            装箱值
            </summary>
        </member>
        <member name="T:NXDO.RJava.JCacheInfo">
            <summary>
            缓存dotnet相关方法（成员变量对应属性）的参数信息，返回值等信息。
            </summary>
        </member>
        <member name="F:NXDO.RJava.JCacheInfo.dicDatas">
            <summary>
            缓存
            </summary>
        </member>
        <member name="M:NXDO.RJava.JCacheInfo.HasCache(System.Type,System.String)">
            <summary>
            是否存在缓存
            </summary>
            <param name="type"></param>
            <param name="cacheName"></param>
            <returns></returns>
        </member>
        <member name="M:NXDO.RJava.JCacheInfo.Add(System.Type,System.String,NXDO.RJava.JCacheInfo)">
            <summary>
            添加缓存信息
            </summary>
            <param name="type">JObject继承类</param>
            <param name="cacheName">缓存的名称 key</param>
            <param name="value">缓存信息</param>
        </member>
        <member name="M:NXDO.RJava.JCacheInfo.Get(System.Type,System.String)">
            <summary>
            获取缓存信息
            </summary>
            <param name="type">JObject继承类</param>
            <param name="cacheName">缓存的名称 key</param>
            <returns>缓存信息</returns>
        </member>
        <member name="P:NXDO.RJava.JCacheInfo.Name">
            <summary>
            java 方法(成员变量)名称
            </summary>
        </member>
        <member name="P:NXDO.RJava.JCacheInfo.IsStatic">
            <summary>
            java 方法(成员变量)是否静态
            </summary>
        </member>
        <member name="P:NXDO.RJava.JCacheInfo.IsVoid">
            <summary>
            java 方法(成员变量)是否无返回值
            <para>方法void好理解。设置成员变量时，其实无返回值，则此为true。</para>
            </summary>
        </member>
        <member name="P:NXDO.RJava.JCacheInfo.Params">
            <summary>
            dotnet 参数列表信息
            </summary>
        </member>
        <member name="T:NXDO.RJava.JClass">
            <summary>
            表示为 java.lang.Class&lt;?&gt; 类型声明。
            </summary>
        </member>
        <member name="M:NXDO.RJava.JClass.ForName(System.String)">
            <summary>
            获取具有指定名称的 JClass，执行区分大小写的搜索。
            </summary>
            <param name="jclassName">要获取的类型限定名称。如果当前正在执行的程序集加载器不存在该类型，请先加载 java 程序集，再提供类型的完全限定名称。</param>
            <returns>具有指定名称的 JClass 。</returns>
        </member>
        <member name="M:NXDO.RJava.JClass.GetArrayHandle">
            <summary>
            java 类型对应数组类型的指针
            </summary>
            <returns></returns>
        </member>
        <member name="M:NXDO.RJava.JClass.GetGenericArguments">
            <summary>
            返回表示泛型类型的类型实参或泛型类型定义的类型形参的 JParameter 对象的数组。
            </summary>
            <returns>如果当前类型不是泛型类型，则返回一个空数组。</returns>
        </member>
        <member name="M:NXDO.RJava.JClass.GetInterface(System.String,System.Boolean)">
            <summary>
            获取由当前 JClass 实现或继承的指定名称的接口。
            </summary>
            <param name="interfaceName">java接口名称，含包名。</param>
            <param name="ignoreCase">为 interfaceName 执行的搜索不区分大小写则为 true，为 interfaceName 执行的搜索区分大小写则为 false。</param>
            <returns>指定名称的接口</returns>
        </member>
        <member name="M:NXDO.RJava.JClass.GetInterfaces">
            <summary>
            获取由当前 JClass 实现或继承的所有接口。
            </summary>
            <returns>所有接口</returns>
        </member>
        <member name="M:NXDO.RJava.JClass.GetElementClass">
            <summary>
            返回当前数组类型包含的 JClass。
            </summary>
            <returns>数组元素的 JClass 类型。</returns>
        </member>
        <member name="M:NXDO.RJava.JClass.IsAssignableFrom(NXDO.RJava.JClass)">
            <summary>
            确定当前的 JClass 的实例是否可以从指定 JClass 的实例分配。
            </summary>
            <param name="clazz">与当前的 JClass 进行比较的 JClass。</param>
            <returns>如果满足下列任一条件，则为 true：clazz 和当前 JClass 表示同一类型；当前 JClass 位于 clazz 的继承层次结构中；当前 JClass 是 clazz 实现的接口；如果不满足上述任何一个条件或者 clazz 为 null，则为 false。</returns>
        </member>
        <member name="M:NXDO.RJava.JClass.IsSubclassOf(NXDO.RJava.JClass)">
            <summary>
            确定当前 JClass 表示的类是否是从指定的 JClass 表示的类派生的。
            </summary>
            <param name="clazz">与当前的 JClass 进行比较的 JClass，参数应设置成超类。</param>
            <returns>是参数的派生类则为 true；否则为false。如果参数和当前的 JClass 表示相同的类，则此方法还返回 false。</returns>
        </member>
        <member name="M:NXDO.RJava.JClass.IsInstanceOfJClass(NXDO.RJava.JObject)">
            <summary>
            确定指定的对象是否是当前 JClass 的实例。
            </summary>
            <param name="obj">将与当前 JClass 进行比较的对象。</param>
            <returns>如果满足下列任一条件，则为 true：当前 JClass 位于由 obj 表示的对象的继承层次结构中；当前 JClass 是 obj 支持的接口。如果不属于其中任一种情况，或者 obj 为 null，则为 false。</returns>
        </member>
        <member name="M:NXDO.RJava.JClass.AsSubJClass(NXDO.RJava.JClass)">
            <summary>
            将当前的 JClass 转换成指定参数 clazz 的子类.
            <para>Class&lt;?&gt;.asSubclass() 方法。</para>
            </summary>
            <param name="clazz">当前 JClass 的父类</param>
            <returns>获取参数对应的子类.</returns>
        </member>
        <member name="M:NXDO.RJava.JClass.AsCast(System.String,NXDO.RJava.JIBase)">
            <summary>
            将一个对象强制转换成 jclassName 参数指定 Java 类型所表示的类或接口对象。
            <para>Class&lt;?&gt;.cast() 方法。</para>
            </summary>
            <param name="jclassName">要获取的 java 类型限定名称。</param>
            <param name="iobj">需要强制转换的对象</param>
            <returns>参数指定类型所表示的类或接口对象</returns>
        </member>
        <member name="M:NXDO.RJava.JClass.AsCast(NXDO.RJava.JIBase)">
            <summary>
            将一个对象强制转换成当前 JClass 类型所表示的类或接口对象。
            <para>Class&lt;?&gt;.cast() 方法。</para>
            </summary>
            <param name="iobj">需要强制转换的对象.</param>
            <returns>当前 JClass 类型所表示的类或接口对象</returns>
        </member>
        <member name="M:NXDO.RJava.JClass.AsCast``1(NXDO.RJava.JIBase)">
            <summary>
            将一个对象强制转换成当前 JClass 类型所表示的类或接口对象。
            <para>Class&lt;?&gt;.cast() 方法。</para>
            </summary>
            <typeparam name="T">指定转换后的类型</typeparam>
            <param name="iobj">需要强制转换的对象</param>
            <returns>当前 JClass 类型所表示的类或接口对象</returns>
        </member>
        <member name="M:NXDO.RJava.JClass.op_Equality(NXDO.RJava.JClass,NXDO.RJava.JClass)">
            <summary>
            判断类型是否相同
            </summary>
            <param name="clazz1"></param>
            <param name="clazz2"></param>
            <returns></returns>
        </member>
        <member name="M:NXDO.RJava.JClass.op_Inequality(NXDO.RJava.JClass,NXDO.RJava.JClass)">
            <summary>
            判断类型是否不同
            </summary>
            <param name="clazz1"></param>
            <param name="clazz2"></param>
            <returns></returns>
        </member>
        <member name="F:NXDO.RJava.JClass.EmptyClasses">
            <summary>
            表示 JClass 类型的空数组。此字段为只读。
            </summary>
        </member>
        <member name="M:NXDO.RJava.JClass.NewInstance">
            <summary>
            建立 JClass 类型的实例对象。
            <para>必须确 java 类型保存在无参的构造函数。</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:NXDO.RJava.JClass.GetConstructor(NXDO.RJava.JClass[])">
            <summary>
            搜索其参数与指定数组中的类型匹配的实例构造函数。
            </summary>
            <param name="jclasses">表示需要的构造函数的参数个数、顺序和类型的 JClass 对象的数组。- 或 -JClass 对象的空数组，用于获取不带参数的构造函数。这样的空数组由 static 字段 JClass.EmptyClasses 提供。</param>
            <returns>获取表示某个实例构造函数（该构造函数的参数与参数类型数组中的类型匹配）。</returns>
        </member>
        <member name="M:NXDO.RJava.JClass.GetConstructors">
            <summary>
            返回为当前 JClass 定义的所有构造函数。
            </summary>
            <returns>JConstructor 对象数组</returns>
        </member>
        <member name="M:NXDO.RJava.JClass.GetMethod(System.String,NXDO.RJava.JClass[])">
            <summary>
            搜索具有指定名称的方法。
            <para>如果存在多个同名方法，则返回其中第一个方法。</para>
            </summary>
            <param name="jmethodName">包含要获取的方法的名称</param>
            <param name="jclasses">表示此方法要获取的参数的个数、顺序和类型的 JClass 对象数组。空的 System.Type 对象数组（由 JClass.EmptyClasses字段提供），用来获取不采用参数的方法。</param>
            <returns></returns>
        </member>
        <member name="M:NXDO.RJava.JClass.GetMethods">
            <summary>
            返回当前 JClass 的所有方法。
            </summary>
            <returns>表示为当前 JClass 定义的所有方法的 NXDO.RJava.Reflection.JMethod 对象数组</returns>
        </member>
        <member name="M:NXDO.RJava.JClass.GetOptimalMethods(System.String,System.Int32)">
            <summary>
            获取匹配度最佳的方法，为满足动态类的方法调用。
            </summary>
            <param name="jmethodName">方法名(不区分大小写名称)</param>
            <param name="paramLength">参数的个数</param>
            <returns></returns>
        </member>
        <member name="P:NXDO.RJava.JClass.Handle">
            <summary>
            java 类型指针
            </summary>
        </member>
        <member name="P:NXDO.RJava.JClass.FullName">
            <summary>
            获取 JClass 的完全限定名，包括 JClass 的包名，但不包括 jar 程序集。
            </summary>
        </member>
        <member name="P:NXDO.RJava.JClass.Name">
            <summary>
            获取 JClass 名称
            </summary>
        </member>
        <member name="P:NXDO.RJava.JClass.Package">
            <summary>
            获取 JClass 的包名。
            </summary>
        </member>
        <member name="P:NXDO.RJava.JClass.IsAbstract">
            <summary>
            获取一个值，通过该值指示 JClass 是否为抽象的并且必须被重写。
            </summary>
        </member>
        <member name="P:NXDO.RJava.JClass.IsArray">
            <summary>
            获取一个值，通过该值指示 JClass 是否为数组。
            </summary>
        </member>
        <member name="P:NXDO.RJava.JClass.IsEnum">
            <summary>
            获取一个值，该值指示当前的 JClass 是否表示枚举。
            </summary>
        </member>
        <member name="P:NXDO.RJava.JClass.IsInterface">
            <summary>
            获取一个值，通过该值指示 JClass 是否为接口（即不是类或值类型）。
            </summary>
        </member>
        <member name="P:NXDO.RJava.JClass.IsPublic">
            <summary>
            获取一个值，该值指示 JClass 是否声明为公共类型。
            </summary>
        </member>
        <member name="P:NXDO.RJava.JClass.IsSealed">
            <summary>
            获取一个值，通过该值指示 JClass 是否声明为密封的 (final)。
            </summary>
        </member>
        <member name="P:NXDO.RJava.JClass.IsPrimitive">
            <summary>
            获取一个值，通过该值指示 JClass 是否为基元类型之一。
            </summary>
        </member>
        <member name="P:NXDO.RJava.JClass.IsGenericClass">
            <summary>
            获取一个值，该值指示当前 JClass 是否是泛型类型。
            </summary>
        </member>
        <member name="P:NXDO.RJava.JClass.BaseClass">
            <summary>
             获取当前 JClass 直接从中继承的类型。
            </summary>
        </member>
        <member name="P:NXDO.RJava.JClass.DeclaringClass">
            <summary>
             获取用来声明当前的嵌套类型或泛型类型参数的 JClass 类型。
            </summary>
        </member>
        <member name="T:NXDO.RJava.Core.JPInt">
            <summary>
            int/Integer (数组)类型参数
            </summary>
        </member>
        <member name="T:NXDO.RJava.Core.JPObject">
            <summary>
            通用性Object参数
            </summary>
        </member>
        <member name="F:NXDO.RJava.Core.JPObject.JavaBaseObjectClassName">
            <summary>
            一切java类的根类型名称，java.lang.Object。
            </summary>
        </member>
        <member name="M:NXDO.RJava.Core.JPObject.GetJBoxPtr(NXDO.RJava.JObject)">
            <summary>
            获取装箱值对应的 java 值（指针）
            </summary>
            <param name="jobject"></param>
            <returns>java 值（指针）</returns>
        </member>
        <member name="T:NXDO.RJava.Core.JMReturn`1">
            <summary>
            转换 java 方法的返回值。
            <para>返回类型不明确的，使用根对象 JObject 或 object。</para>
            </summary>
            <typeparam name="T">转换成的类型</typeparam>
        </member>
        <member name="M:NXDO.RJava.Core.JMReturn`1.#ctor(System.IntPtr,NXDO.RJava.JUnknown)">
            <summary>
            转换java方法的返回值
            </summary>
            <param name="ptr"></param>
            <param name="jobjectReturn">有值时：作为JObjectReturn已返回到C#用户代码，再次通过 ToJavaValue 方法进行转换，全部以java对象做处理</param>
        </member>
        <member name="P:NXDO.RJava.Core.JMReturn`1.JResultReturn">
            <summary>
            再次通过 ToDotValue 进行转换的原始对象
            </summary>
        </member>
        <member name="T:NXDO.RJava.Extension.JClassExtension">
            <summary>
            JClass扩展，获取基本类型与其它类型对应的 JClass。
            <para>其它类型，包括 string，DateTime，JObject继承子类等。</para>
            </summary>
        </member>
        <member name="M:NXDO.RJava.Extension.JClassExtension.ToJavaClass(System.Type)">
            <summary>
            获取 dotnet 类型所对应 java 类型的申明。
            </summary>
            <param name="type">dotnet 类型</param>
            <returns>dotnet 类型所表示的 JClass 实例。</returns>
        </member>
        <member name="T:NXDO.RJava.JClass`1">
            <summary>
            获取 dotnet 基本类型与其它类型对应的 JClass。
            <para>其它类型，包括 string，DateTime，JObject继承子类等。</para>
            </summary>
            <typeparam name="T">dotnet类型</typeparam>
        </member>
        <member name="P:NXDO.RJava.JClass`1.Class">
            <summary>
            dotnet 类型所表示的 JClass 实例。
            </summary>
        </member>
        <member name="T:NXDO.RJava.JDynamicObject">
            <summary>
            包装 JObject 的动态行为的实例。
            </summary>
        </member>
        <member name="F:NXDO.RJava.JDynamicObject.jclass">
            <summary>
            当前包装的 java 类型
            </summary>
        </member>
        <member name="M:NXDO.RJava.JDynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            执行动态方法(实例或静态)。
            </summary>
            <param name="binder">动态操作绑定实例。</param>
            <param name="args">动态方法的参数</param>
            <param name="result">方法执行后的返回结果</param>
            <returns>是否执行成功。</returns>
        </member>
        <member name="M:NXDO.RJava.JDynamicObject.GetDynamic">
            <summary>
            dynamic 关键字
            </summary>
            <returns></returns>
        </member>
        <member name="T:NXDO.RJava.Core.JList`1">
            <summary>
            表示为 java.util.List&lt;?&gt; 接口声明，并继承了 System.Collections.Generic.IList&lt;T&gt; 接口。
            <para>C#,  JList&lt;int&gt; jList = new List&lt;int&gt;().ToJavaList();   //扩展方法</para>
            </summary>
            <typeparam name="T">元素类型</typeparam>   
        </member>
        <member name="P:NXDO.RJava.Core.JavaList`1.JClass">
            <summary>
            如果没有改变，则为 List 接口的类型
            </summary>
        </member>
        <member name="P:NXDO.RJava.Core.JavaList`1.JValue">
            <summary>
            ArrayList 对象实例
            </summary>
        </member>
        <member name="T:NXDO.RJava.JDynamic">
            <summary>
            动态方法参数
            </summary>
        </member>
        <member name="M:NXDO.RJava.JDynamic.Parameter(System.String,System.Object)">
            <summary>
            获取传递给动态方法的参数值
            </summary>
            <param name="javaClassName">显示指定参数的 java 类型名称</param>
            <param name="value">参数值</param>
            <returns>动态方法参数</returns>
        </member>
        <member name="T:NXDO.RJava.JEmitInterface">
            <summary>
            JEmitInterface 普通类，提供相关静态属性
            </summary>
        </member>
        <member name="P:NXDO.RJava.JEmitInterface.ConstructorZeroParam">
            <summary>
            具有0个参数的公共构造函数。
            </summary>
        </member>
        <member name="P:NXDO.RJava.JEmitInterface.ConstructorPtrParam">
            <summary>
            具有2个IntPtr参数的受保护构造函数。
            </summary>
        </member>
        <member name="P:NXDO.RJava.JEmitInterface.JInvokeMethod">
            <summary>
            获取无返回值的方法对象
            </summary>
        </member>
        <member name="P:NXDO.RJava.JEmitInterface.JInvokeMethodT">
            <summary>
            获取具有T类型返回值的方法对象
            </summary>
        </member>
        <member name="P:NXDO.RJava.JEmitInterface.JInvokeField">
            <summary>
            获取具有T类型返回值的方法对象
            </summary>
        </member>
        <member name="M:NXDO.RJava.JEmitInterface`1.createrCtor">
            <summary>
            建立构造函数
            </summary>
        </member>
        <member name="M:NXDO.RJava.JEmitInterface`1.createrMethod(System.Collections.Generic.List{System.String})">
            <summary>
            建立调用方法
            </summary>
        </member>
        <member name="M:NXDO.RJava.JEmitInterface`1.createMethod(System.Reflection.MethodInfo,System.Boolean,System.String)">
            <summary>
            建立调用方法
            </summary>
            <param name="m"></param>
            <param name="isSpecial">特殊方法名称, true:表示为属性的访问方法.</param>
        </member>
        <member name="T:NXDO.RJava.JUnknown">
            <summary>
            java明确类型，dotnet中类型不明确的，以 JObject，object 为返回值或参数的包装器。
            <para>仅当方法返回值或参数显示定义为 JObject，object 时，才有效。</para>
            </summary>
        </member>
        <member name="M:NXDO.RJava.JUnknown.op_Implicit(NXDO.RJava.JUnknown)~System.Boolean">
            <summary>
            bool拆箱
            </summary>
            <param name="value"></param>
            <returns>dotnet bool值</returns>
        </member>
        <member name="M:NXDO.RJava.JUnknown.op_Implicit(NXDO.RJava.JUnknown)~System.Byte">
            <summary>
            byte拆箱
            </summary>
            <param name="value"></param>
            <returns>dotnet byte值</returns>
        </member>
        <member name="M:NXDO.RJava.JUnknown.op_Implicit(NXDO.RJava.JUnknown)~System.Char">
            <summary>
            char拆箱
            </summary>
            <param name="value"></param>
            <returns>dotnet char值</returns>
        </member>
        <member name="M:NXDO.RJava.JUnknown.op_Implicit(NXDO.RJava.JUnknown)~System.Int16">
            <summary>
            short拆箱
            </summary>
            <param name="value"></param>
            <returns>dotnet short值</returns>
        </member>
        <member name="M:NXDO.RJava.JUnknown.op_Implicit(NXDO.RJava.JUnknown)~System.Int32">
            <summary>
            int拆箱
            </summary>
            <param name="value"></param>
            <returns>dotnet int值</returns>
        </member>
        <member name="M:NXDO.RJava.JUnknown.op_Implicit(NXDO.RJava.JUnknown)~System.Int64">
            <summary>
            long拆箱
            </summary>
            <param name="value"></param>
            <returns>dotnet long值</returns>
        </member>
        <member name="M:NXDO.RJava.JUnknown.op_Implicit(NXDO.RJava.JUnknown)~System.Single">
            <summary>
            float拆箱
            </summary>
            <param name="value"></param>
            <returns>dotnet float值</returns>
        </member>
        <member name="M:NXDO.RJava.JUnknown.op_Implicit(NXDO.RJava.JUnknown)~System.Double">
            <summary>
            double拆箱
            </summary>
            <param name="value"></param>
            <returns>dotnet double值</returns>
        </member>
        <member name="M:NXDO.RJava.JUnknown.op_Implicit(NXDO.RJava.JUnknown)~System.String">
            <summary>
            string拆箱
            </summary>
            <param name="value"></param>
            <returns>dotnet string值</returns>
        </member>
        <member name="T:NXDO.RJava.JInvokeHelper">
            <summary>
            java参数建立的帮助器
            </summary>
        </member>
        <member name="M:NXDO.RJava.JInvokeHelper.GetConstructorParams(System.Type,System.Object[])">
            <summary>
            获取构造函数的缓存信息
            </summary>
            <param name="type">JObject继承类的类型</param>
            <param name="values">参数值列表</param>
            <returns>java构造函数的参数值列表</returns>
        </member>
        <member name="M:NXDO.RJava.JInvokeHelper.GetCacheMethodParams(System.Type)">
            <summary>
            获取调用方法的缓存信息
            </summary>
            <param name="type">JObject继承类的类型</param>
            <returns>缓存信息对象实例</returns>
        </member>
        <member name="M:NXDO.RJava.JInvokeHelper.GetCacheFieldParam(System.Type,System.Boolean,System.String)">
            <summary>
            获取成员变量对应属性的缓存信息
            </summary>
            <param name="type">JObject继承类的类型</param>
            <param name="isSet">是否为设置值</param>
            <param name="fieldName">java成员变量名称</param>
            <returns>缓存信息对象实例</returns>
        </member>
        <member name="M:NXDO.RJava.JInvokeHelper.GetInvokePtr(System.Boolean,NXDO.RJava.JObject,System.Type)">
            <summary>
            获取静态/实例方法(成员变量)使用不同的指针值
            </summary>
            <param name="isStatic"></param>
            <param name="jObjectInstance"></param>
            <param name="jObjectType"></param>
            <returns>方法或成员变量调用指针值</returns>
        </member>
        <member name="M:NXDO.RJava.JInvokeHelper.ConvertToJParams(NXDO.RJava.JCacheInfo,System.Object[])">
            <summary>
            转换成 java 可用的参数对象
            </summary>
            <param name="info">java 缓存信息</param>
            <param name="values">参数值</param>
            <returns>java 可用的参数值列表</returns>
        </member>
        <member name="M:NXDO.RJava.JInvokeHelper.CreateJParamValue(System.Object,System.Object)">
            <summary>
            创建传递到 java 方法的参数类型与参数值
            </summary>
            <param name="valType">c#参数类型</param>
            <param name="value">c#参数值</param>
            <returns>java方法的参数值列表</returns>
        </member>
        <member name="M:NXDO.RJava.JInvokeHelper.GetDefaultMethodName(System.String,System.String)">
            <summary>
            获取默认的方法名称。
            <para>如果某方法未标识 JMethod 特性。</para>
            </summary>
            <param name="methodName">方法名称</param>
            <param name="prefix">方法前缀（主要针对属性 setXXX,getXXX）</param>
            <returns></returns>
        </member>
        <member name="T:NXDO.RJava.Extension.JObjectExtension">
            <summary>
            JObject 扩展
            </summary>
        </member>
        <member name="M:NXDO.RJava.Extension.JObjectExtension.ToDotValue``1(NXDO.RJava.JObject)">
            <summary>
            将 JObject 转换成 java 所对应 dotnet 的值。
            <para>转换后，相关实例可能被 JVM 释放。</para>
            </summary>
            <typeparam name="T">dotnet 转换类型</typeparam>
            <param name="jobject">需要转换的值</param>
            <returns>T类型的值</returns>
        </member>
        <member name="M:NXDO.RJava.Extension.JObjectExtension.ToDotValue``1(System.Object)">
            <summary>
            将 object 转换成 java 所对应 dotnet 的值。
            <para>转换后，相关实例可能被 JVM 释放。</para>
            </summary>
            <typeparam name="T">dotnet 转换类型</typeparam>
            <param name="jobject">需要转换的值</param>
            <returns>T类型的值</returns>
        </member>
        <member name="M:NXDO.RJava.Extension.JObjectExtension.ToDotValue``1(System.Collections.Generic.IEnumerable{NXDO.RJava.JObject})">
            <summary>
            将 JObject迭代器 转换成 java 所对应 dotnet 的迭代器。
            <para>转换后，相关实例可能被 JVM 释放。</para>
            </summary>
            <typeparam name="T">dotnet 转换类型</typeparam>
            <param name="jobjects">需要转换的迭代器</param>
            <returns>T类型的迭代器</returns>
        </member>
        <member name="M:NXDO.RJava.Extension.JObjectExtension.ToDotValue``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            将 object 迭代器 转换成 java 所对应 dotnet 的迭代器。
            <para>转换后，相关实例可能被 JVM 释放。</para>
            </summary>
            <typeparam name="T">dotnet 转换类型</typeparam>
            <param name="objects">需要转换的迭代器</param>
            <returns>T类型的迭代器</returns>
        </member>
        <member name="M:NXDO.RJava.Extension.JObjectExtension.ToRJavaDynamic(NXDO.RJava.JObject)">
            <summary>
            转换成动态包装实例，可使用 dynamic 定义当前变量。
            <para>动态方法调用时，如果最佳参数匹配无法推导出方法，可使用 JDynamic.Get() 显示指定 java 参数的类型。</para>
            </summary>
            <param name="jobj">JObject 实例。</param>
            <returns>动态包装实例。</returns>
        </member>
        <member name="M:NXDO.RJava.Extension.JObjectExtension.ToRJavaDefine``1(NXDO.RJava.JObject)">
            <summary>
            转换 JObject 为已知的 java 包装类型。比方，通过反射建立的 JObject，存在对应的类或接口，则可通过此进行转换。
            <example><para>例：</para></example>
            <code>
                <para>var jclz = JClass.ForName("java.util.ArrayList");</para>
                <para>var jobj = JActivator.CreateInstance(jclz);</para>
                <para>jclz.GetMethod("add", JObject.Class)Invoke(jobj, new object[] { 1 });</para>
                <para>//已上代码等同于 ArrayList.add(1);</para>
                <para>JList&lt;int&gt; jaryList = jobj.ToRJavaDefine&lt;JList&lt;int&gt;&gt;();</para>
                <para>其中：JList&lt;int&gt; 是已知的，并对应了 java.util.List 的接口。</para>
            </code>         
            </summary>
            <typeparam name="T">包装类型，支持接口与类。
            </typeparam>
            <param name="jobj">需要转换的实例。</param>
            <returns>T类型的实例，或T接口的实现实例。</returns>
        </member>
        <member name="M:NXDO.RJava.Extension.JObjectExtension.ToRJavaDefine``1(NXDO.RJava.JObject,System.Reflection.Assembly)">
            <summary>
            转换 JObject 为已知的 java 包装类型。比方，通过反射建立的 JObject，存在对应的类或接口，则可通过此进行转换。
            <example><para>例：</para></example>
            <code>
                <para>var jclz = JClass.ForName("java.util.ArrayList");</para>
                <para>var jobj = JActivator.CreateInstance(jclz);</para>
                <para>jclz.GetMethod("add", JObject.Class)Invoke(jobj, new object[] { 1 });</para>
                <para>//已上代码等同于 ArrayList.add(1);</para>
                <para>JList&lt;int&gt; jaryList = jobj.ToRJavaDefine&lt;JList&lt;int&gt;&gt;();</para>
                <para>其中：JList&lt;int&gt; 是已知的，并对应了 java.util.List 的接口。</para>
            </code>         
            </summary>
            <typeparam name="T">包装类型，支持接口与类。
            </typeparam>
            <param name="jobj">需要转换的实例。</param>
            <param name="searchAssembly">搜索 T 所在的程序集。仅当T是接口并且是用户自定义实现时，需要提供此参数。</param>
            <returns>T类型的实例，或T接口的实现实例。</returns>
        </member>
        <member name="T:NXDO.RJava.Reflection.JConstructor">
            <summary>
            发现 java 类构造函数的属性并提供对 &lt;init&gt; 构造函数元数据的访问权。
            </summary>
        </member>
        <member name="M:NXDO.RJava.Reflection.JConstructor.Invoke(System.Object[])">
            <summary>
            调用具有指定参数的实例所反映的构造函数，并为参数提供值。
            </summary>
            <param name="parameters">与此构造函数的参数的个数、顺序和类型（受默认联编程序的约束）相匹配的值数组。</param>
            <returns>返回与构造函数关联的类的实例。</returns>
        </member>
        <member name="M:NXDO.RJava.Reflection.JConstructor.Invoke``1(System.Object[])">
            <summary>
            调用具有指定参数的实例所反映的构造函数，并为参数提供值。
            </summary>
            <typeparam name="T">JObject 继承类的类型。</typeparam>
            <param name="parameters">与此构造函数的参数的个数、顺序和类型（受默认联编程序的约束）相匹配的值数组。</param>
            <returns>返回与指定T类型关联的类的实例。</returns>
        </member>
        <member name="P:NXDO.RJava.Reflection.JConstructor.Handle">
            <summary>
            java 构造函数指针
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JConstructor.Name">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JConstructor.IsAbstract">
            <summary>
            获取一个值，该值指示此方法是否为抽象方法。
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JConstructor.IsFinal">
            <summary>
            获取一个值，该值指示此方法是否为 final。
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JConstructor.IsPrivate">
            <summary>
            获取一个值，该值指示此成员是否是私有的。
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JConstructor.IsPublic">
            <summary>
            获取一个值，该值指示这是否是一个公共方法。
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JConstructor.IsStatic">
            <summary>
            获取一个值，该值指示方法是否为 static。
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JConstructor.DeclaringClass">
            <summary>
             获取声明该成员的 JClass 类。
            </summary>
        </member>
        <member name="T:NXDO.RJava.Reflection.JField">
            <summary>
            发现 java 字段特性并提供对 java 字段元数据的访问权。
            </summary>
        </member>
        <member name="M:NXDO.RJava.Reflection.JField.GetValue(NXDO.RJava.JObject)">
            <summary>
            返回给定对象支持的字段的值。
            </summary>
            <param name="obj">其字段所属的对象。静态字段时，此值设为 null。</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:NXDO.RJava.Reflection.JField.GetValue``1(NXDO.RJava.JObject)">
            <summary>
            返回给定对象支持的字段的值。
            </summary>
            <typeparam name="T">字段值的类型。</typeparam>
            <param name="obj">其字段所属的对象。静态字段时，此值设为 null。</param>
            <returns>T类型的字段值。</returns>
        </member>
        <member name="M:NXDO.RJava.Reflection.JField.SetValue(NXDO.RJava.JObject,System.Object)">
            <summary>
            设置给定对象支持的字段值。
            <para>TODO:目前不支持数组传入。</para>
            </summary>
            <param name="obj">其字段所属的对象。静态字段时，此值设为 null。</param>
            <param name="value">分配给字段的值。</param>
        </member>
        <member name="P:NXDO.RJava.Reflection.JField.Handle">
            <summary>
            java 方法指针
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JField.Name">
            <summary>
            成员名称
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JField.IsFinal">
            <summary>
            获取一个值，该值指示此方法是否为 final。
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JField.IsPrivate">
            <summary>
            获取一个值，该值指示此成员是否是私有的。
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JField.IsPublic">
            <summary>
            获取一个值，该值指示这是否是一个公共方法。
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JField.IsStatic">
            <summary>
            获取一个值，该值指示方法是否为 static。
            </summary>
        </member>
        <member name="T:NXDO.RJava.Reflection.JMethod">
            <summary>
            发现 java 方法的属性并提供对 java 方法元数据的访问。
            </summary>
        </member>
        <member name="M:NXDO.RJava.Reflection.JMethod.GetParameters">
            <summary>
            获取指定的方法或构造函数的参数。
            </summary>
            <returns>JParameter 类型的数组，包含与此 JMethod 实例所反射的方法（或构造函数）的签名匹配的信息。</returns>
        </member>
        <member name="M:NXDO.RJava.Reflection.JMethod.Invoke(NXDO.RJava.JObject,System.Object[])">
            <summary>
            使用指定的参数调用当前实例所表示的方法或构造函数。
            </summary>
            <param name="jobject">对其调用方法或构造函数的对象。如果方法是静态的，则忽略此参数。</param>
            <param name="parameters">调用的方法或构造函数的参数列表。如果没有参数，则此应为 null。</param>
            <returns>包含被调用方法的返回值；如果方法的返回类型是 void，则为 null。</returns>
        </member>
        <member name="M:NXDO.RJava.Reflection.JMethod.Invoke``1(NXDO.RJava.JObject,System.Object[])">
            <summary>
            使用指定的参数调用当前实例所表示的方法或构造函数。
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="jobject">对其调用方法或构造函数的对象。如果方法是静态的，则忽略此参数。</param>
            <param name="parameters">调用的方法或构造函数的参数列表。如果没有参数，则此应为 null。</param>
            <returns>包含被调用方法的返回值；如果方法的返回类型是 void，则为 null。</returns>
        </member>
        <member name="P:NXDO.RJava.Reflection.JMethod.Handle">
            <summary>
            java 方法指针
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JMethod.Name">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JMethod.IsAbstract">
            <summary>
            获取一个值，该值指示此方法是否为抽象方法。
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JMethod.IsFinal">
            <summary>
            获取一个值，该值指示此方法是否为 final。
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JMethod.IsPrivate">
            <summary>
            获取一个值，该值指示此成员是否是私有的。
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JMethod.IsPublic">
            <summary>
            获取一个值，该值指示这是否是一个公共方法。
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JMethod.IsStatic">
            <summary>
            获取一个值，该值指示方法是否为 static。
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JMethod.DeclaringClass">
            <summary>
             获取声明该成员的 JClass 类。
            </summary>
        </member>
        <member name="T:NXDO.RJava.Reflection.JParameter">
            <summary>
            发现参数属性并提供对参数元数据的访问。
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JParameter.ParameterClass">
            <summary>
            参数类型(泛型参数时,为擦除后的超类类型)
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JParameter.GenericParamName">
            <summary>
            泛型参数的名称(普通参数无名称)
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JParameter.IsGenericClass">
            <summary>
            true: 泛型类
            </summary>
        </member>
        <member name="P:NXDO.RJava.Reflection.JParameter.IsGenericParameter">
            <summary>
            true: 泛型参数
            </summary>
        </member>
    </members>
</doc>
